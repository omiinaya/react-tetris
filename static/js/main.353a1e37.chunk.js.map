{"version":3,"sources":["components/styles/StyledTetris.js","gameHelpers.js","tetrominos.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js"],"names":["StyledTetrisWrapper","styled","div","StyledTetris","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledStage","props","width","StyledCell","React","memo","type","console","log","Stage","height","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","mtrx","_","index","column","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","dropPlayer","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","onTap","onSwipe","direction","role","tabIndex","onKeyDown","e","keyCode","move","onKeyUp","document","getElementById","focus","className","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.353a1e37.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n  padding-top: 2vh;\r\n  width: 100vw;\r\n  height: 83vh;\r\n\r\n  @media (max-device-width: 1224px) {\r\n    padding-top: 2vh;\r\n    height: 73vh;\r\n  }\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 auto;\r\n  \r\n`;\r\n","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, 'clear'])\r\n  );\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  // THIS IS SLOWER!!!\r\n  // return player.tetromino.some((row, y) =>\r\n  //   row.some((cell, x) => {\r\n  //     if (cell !== 0) {\r\n  //       return (\r\n  //         !stage[y + player.pos.y + moveY] ||\r\n  //         !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n  //         stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n  //           'clear'\r\n  //       );\r\n  //     }\r\n  //     return false;\r\n  //   })\r\n  // );\r\n\r\n  // Using for loops to be able to return (and break). Not possible with forEach\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      // 1. Check that we're on an actual Tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. Check that our move is inside the game areas height (y)\r\n          // That we're not go through bottom of the play area\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // 3. Check that our move is inside the game areas width (x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // 4. Check that the cell wer'e moving to isn't set to clear\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            'clear'\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // 5. If everything above is false\r\n  return false;\r\n};\r\n","export const TETROMINOS = {\r\n  0: { shape: [[0]], color: '0, 0, 0' },\r\n  I: {\r\n    shape: [[0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0]],\r\n    color: '80, 227, 230',\r\n  },\r\n  J: { shape: [[0, 'J', 0], [0, 'J', 0], ['J', 'J', 0]], color: '36, 95, 223' },\r\n  L: {\r\n    shape: [[0, 'L', 0], [0, 'L', 0], [0, 'L', 'L']],\r\n    color: '223, 173, 36',\r\n  },\r\n  O: { shape: [['O', 'O'], ['O', 'O']], color: '223, 217, 36' },\r\n  S: { shape: [[0, 'S', 'S'], ['S', 'S', 0], [0, 0, 0]], color: '48, 211, 56' },\r\n  T: {\r\n    shape: [[0, 0, 0], ['T', 'T', 'T'], [0, 'T', 0]],\r\n    color: '132, 61, 198',\r\n  },\r\n  Z: { shape: [['Z', 'Z', 0], [0, 'Z', 'Z'], [0, 0, 0]], color: '227, 78, 78' },\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = 'IJLOSTZ';\r\n  const randTetromino =\r\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n  return TETROMINOS[randTetromino];\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n    const sweepRows = newStage =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n          return ack;\r\n        }\r\n        ack.push(row);\r\n        return ack;\r\n      }, []);\r\n\r\n    const updateStage = prevStage => {\r\n      // First flush the stage\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n      );\r\n\r\n      // Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? 'merged' : 'clear'}`,\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      // Then check if we got some score if collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n      return newStage;\r\n    };\r\n\r\n    // Here are the updates\r\n    setStage(prev => updateStage(prev));\r\n  }, [\r\n    player.collided,\r\n    player.pos.x,\r\n    player.pos.y,\r\n    player.tetromino,\r\n    resetPlayer,\r\n  ]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(${props => props.width}, 1fr);\r\n  border: 2px solid #333;\r\n  height: 80vh;\r\n  width: 30vw;\r\n  margin: 0 auto;\r\n  background: #111;\r\n\r\n  @media (max-device-width: 1224px) {\r\n    height: 70vh;\r\n    width: 100vw;\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  background: rgba(${props => props.color}, 0.8);\r\n  -webkit-box-shadow:inset 0px 0px 0px 0.5px rgba(105, 105, 105, 0.5);\r\n  -moz-box-shadow:inset 0px 0px 0px 0.5px rgba(105, 105, 105, 0.5);\r\n  box-shadow:inset 0px 0px 0px 0.5x rgba(105, 105, 105, 0.5);\r\n`;\r\n","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\n// React.memo makes sure we only re-render the changed cells\r\nconst Cell = ({ type }) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color}>\r\n    {console.log('rerender cell')}\r\n  </StyledCell>\r\n);\r\n\r\nexport default React.memo(Cell);\r\n","import React from 'react';\r\nimport { StyledStage } from './styles/StyledStage';\r\n\r\nimport Cell from './Cell';\r\n\r\nconst Stage = ({ stage }) => (\r\n  <StyledStage width={stage[0].length} height={stage.length}>\r\n    {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n  </StyledStage>\r\n);\r\n\r\nexport default Stage;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\n  box-sizing: border-box;\r\n  display: inline;\r\n  align-items: center;\r\n  margin: 0 0 0 0;\r\n  padding: 10px;\r\n  \r\n  min-height: 30px;\r\n  width: 20%;\r\n  border-radius: 20px;\r\n  color: ${props => (props.gameOver ? 'red' : 'white')};\r\n  background: #000;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 0.8rem;\r\n  \r\n  @media (max-device-width: 1224px) {\r\n    margin: 1%;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n);\r\n\r\nexport default Display;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\n    box-sizing: border-box;\r\n    display: inline;\r\n    align-items: center;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    min-height: 30px;\r\n    width: 8%;\r\n    border-radius: 20px;\r\n    border: none;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    outline: none;\r\n    cursor: pointer;\r\n    color: white;\r\n    border: 4px solid #333;\r\n    width: 8%;\r\n    background: #000;\r\n    font-size: 0.8rem;\r\n\r\n    @media (max-device-width: 1224px) {\r\n        width: 25%;\r\n      }\r\n`\r\n","import React from 'react';\r\nimport { StyledStartButton } from './styles/StyledStartButton';\r\n\r\nconst StartButton = ({ callback }) => (\r\n  <StyledStartButton onClick={callback}>Start</StyledStartButton>\r\n);\r\n\r\nexport default StartButton;\r\n","import React, { useState } from 'react';\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\nimport ReactTouchEvents from \"react-touch-events\";\r\n\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\n\r\n//document.body.style.overflow = \"hidden\"\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  );\r\n\r\n  console.log('re-render');\r\n\r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      // Activate the interval again when user releases down arrow\r\n      if (keyCode === 40) {\r\n        setDropTime(1000 / (level + 1));\r\n      }\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setScore(0);\r\n    setLevel(0);\r\n    setRows(0);\r\n    setGameOver(false);\r\n    document.getElementById(\"test\").focus();\r\n  };\r\n\r\n  const drop = () => {\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel(prev => prev + 1);\r\n      setDropTime(1000 / (level + 1) + 200);\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      if (player.pos.y < 1) {\r\n        console.log('GAME OVER!!!');\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n    }\r\n  };\r\n\r\n  const dropPlayer = () => {\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n      } else if (keyCode === 38) {\r\n        playerRotate(stage, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleTap = () => {\r\n    //startGame();\r\n  }\r\n\r\n  const handleSwipe = (direction) => {\r\n\r\n    switch (direction) {\r\n      case \"top\":\r\n        playerRotate(stage, 1);\r\n        break;\r\n      case \"bottom\":\r\n        dropPlayer();\r\n        setDropTime(1000 / (level + 1));\r\n        break;\r\n      case \"left\":\r\n        movePlayer(-1);\r\n        break;\r\n      case \"right\":\r\n        movePlayer(1);\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ReactTouchEvents\r\n      onTap={handleTap}\r\n      onSwipe={handleSwipe}\r\n    >\r\n      <div>\r\n        <StyledTetrisWrapper\r\n          id=\"test\"\r\n          role=\"button\"\r\n          tabIndex=\"0\"\r\n          onKeyDown={e => move(e)}\r\n          onKeyUp={keyUp}\r\n        >\r\n          <StyledTetris>\r\n            <Stage stage={stage} />\r\n          </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n        <center>\r\n          <StartButton callback={startGame} />\r\n        </center>\r\n        <center>\r\n          <div>\r\n            {gameOver ? (\r\n              <Display gameOver={gameOver} text=\"Game Over\" />\r\n            ) : (\r\n                <div className=\"ui-bar\">\r\n                  <Display text={`Score: ${score}`} />\r\n                  <Display text={`rows: ${rows}`} />\r\n                  <Display text={`Level: ${level}`} />\r\n                </div>\r\n              )}\r\n          </div>\r\n        </center>\r\n      </div>\r\n    </ReactTouchEvents>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n","import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false,\r\n  });\r\n\r\n  function rotate(matrix, dir) {\r\n\r\n    const mtrx = matrix.map((_, index) => matrix.map(column => column[index]));\r\n\r\n    if (dir > 0) return mtrx.map(row => row.reverse());\r\n    return mtrx.reverse();\r\n  }\r\n\r\n  function playerRotate(stage, dir) {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n    setPlayer(clonedPlayer);\r\n  }\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n\r\n    setPlayer(prev => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided,\r\n\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false,\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n  \r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  const linePoints = [40, 100, 300, 1200];\r\n\r\n  const calcScore = useCallback(() => {\r\n\r\n    if (rowsCleared > 0) {\r\n\r\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      setRows(prev => prev + rowsCleared);\r\n\r\n    }\r\n\r\n  }, [level, linePoints, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n\r\n    calcScore();\r\n  \r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n\r\n    savedCallback.current = callback;\r\n    \r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n\r\n    function tick() {\r\n\r\n      savedCallback.current();\r\n\r\n    }\r\n\r\n    if (delay !== null) {\r\n\r\n      const id = setInterval(tick, delay);\r\n\r\n      return () => {\r\n\r\n        clearInterval(id);\r\n\r\n      };\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React from 'react';\r\nimport Tetris from './components/Tetris';\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <Tetris />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}